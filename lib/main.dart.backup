import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'firebase_options.dart';
import 'services/auth_service.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'ËªΩË≤®Áâ©Ê•≠ÂãôÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.blue,
        textTheme: TextTheme(
          bodyLarge: TextStyle(fontSize: 18),
          bodyMedium: TextStyle(fontSize: 16),
        ),
      ),
      home: AuthWrapper(),
    );
  }
}

class AuthWrapper extends StatelessWidget {
  final AuthService _authService = AuthService();

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: _authService.user,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Scaffold(
            body: Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircularProgressIndicator(),
                  SizedBox(height: 20),
                  Text('Firebase Ë™çË®º„ÇíÁ¢∫Ë™ç‰∏≠...'),
                ],
              ),
            ),
          );
        }
        
        if (snapshot.hasData) {
          // „É≠„Ç∞„Ç§„É≥Ê∏à„Åø
          return DashboardScreen();
        } else {
          // „É≠„Ç∞„Ç§„É≥„Åó„Å¶„ÅÑ„Å™„ÅÑ
          return LoginTestScreen();
        }
      },
    );
  }
}

class LoginTestScreen extends StatefulWidget {
  @override
  _LoginTestScreenState createState() => _LoginTestScreenState();
}

class _LoginTestScreenState extends State<LoginTestScreen> {
  final AuthService _authService = AuthService();
  bool _isLoading = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.blue[50],
      appBar: AppBar(
        title: Text('Ë™çË®º„ÉÜ„Çπ„Éà'),
        backgroundColor: Colors.blue[700],
        foregroundColor: Colors.white,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.security,
              size: 100,
              color: Colors.blue[700],
            ),
            SizedBox(height: 20),
            Text(
              'Firebase Ë™çË®º„ÉÜ„Çπ„Éà',
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Colors.blue[800],
              ),
            ),
            SizedBox(height: 40),
            Container(
              padding: EdgeInsets.all(20),
              margin: EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(10),
                boxShadow: [
                  BoxShadow(
                    color: Colors.grey.withValues(alpha:0.3),
                    spreadRadius: 2,
                    blurRadius: 5,
                  ),
                ],
              ),
              child: Column(
                children: [
                  Icon(
                    Icons.login,
                    size: 60,
                    color: Colors.orange[600],
                  ),
                  SizedBox(height: 10),
                  Text(
                    '„É≠„Ç∞„Ç§„É≥„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì',
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Colors.orange[700],
                    ),
                  ),
                  SizedBox(height: 10),
                  Text(
                    'ÂåøÂêçË™çË®º„Åß„ÉÜ„Çπ„Éà„É≠„Ç∞„Ç§„É≥„Åß„Åç„Åæ„Åô',
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
            ),
            SizedBox(height: 30),
            _isLoading
                ? CircularProgressIndicator()
                : ElevatedButton.icon(
                    onPressed: _testSignIn,
                    icon: Icon(Icons.login, size: 24),
                    label: Text(
                      'ÂåøÂêç„É≠„Ç∞„Ç§„É≥„ÉÜ„Çπ„Éà',
                      style: TextStyle(fontSize: 18),
                    ),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue[700],
                      foregroundColor: Colors.white,
                      padding: EdgeInsets.symmetric(horizontal: 40, vertical: 15),
                      minimumSize: Size(200, 50),
                    ),
                  ),
          ],
        ),
      ),
    );
  }

  Future<void> _testSignIn() async {
    setState(() {
      _isLoading = true;
    });

    String? error = await _authService.signInAnonymously();

    setState(() {
      _isLoading = false;
    });

    if (error != null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('„É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: $error'),
          backgroundColor: Colors.red,
        ),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('üéâ Ë™çË®º„Å´ÊàêÂäü„Åó„Åæ„Åó„ÅüÔºÅ'),
          backgroundColor: Colors.green,
        ),
      );
    }
  }
}

class DashboardScreen extends StatelessWidget {
  final AuthService _authService = AuthService();

  @override
  Widget build(BuildContext context) {
    User? user = _authService.currentUser;

    return Scaffold(
      backgroundColor: Colors.green[50],
      appBar: AppBar(
        title: Text('„É≠„Ç∞„Ç§„É≥ÊàêÂäü'),
        backgroundColor: Colors.green[700],
        foregroundColor: Colors.white,
        actions: [
          IconButton(
            icon: Icon(Icons.logout),
            onPressed: () async {
              await _authService.signOut();
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('„É≠„Ç∞„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü'),
                  backgroundColor: Colors.blue,
                ),
              );
            },
          ),
        ],
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.check_circle,
              size: 100,
              color: Colors.green[700],
            ),
            SizedBox(height: 20),
            Text(
              'üéâ Ë™çË®ºÊàêÂäüÔºÅ',
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Colors.green[800],
              ),
            ),
            SizedBox(height: 40),
            Container(
              padding: EdgeInsets.all(20),
              margin: EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(10),
                boxShadow: [
                  BoxShadow(
                    color: Colors.grey.withValues(alpha:0.3),
                    spreadRadius: 2,
                    blurRadius: 5,
                  ),
                ],
              ),
              child: Column(
                children: [
                  Text(
                    '„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±',
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Colors.green[700],
                    ),
                  ),
                  SizedBox(height: 10),
                  Text('UID: ${user?.uid.substring(0, 8)}...'),
                  Text('Ë™çË®ºÊñπÊ≥ï: ${user?.isAnonymous == true ? "ÂåøÂêç" : "ÈÄöÂ∏∏"}'),
                  Text('‰ΩúÊàêÊó•ÊôÇ: ${user?.metadata.creationTime?.toString().substring(0, 19) ?? "‰∏çÊòé"}'),
                ],
              ),
            ),
            SizedBox(height: 30),
            ElevatedButton.icon(
              onPressed: () async {
                await _authService.signOut();
              },
              icon: Icon(Icons.logout, size: 24),
              label: Text(
                '„É≠„Ç∞„Ç¢„Ç¶„Éà',
                style: TextStyle(fontSize: 18),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red[600],
                foregroundColor: Colors.white,
                padding: EdgeInsets.symmetric(horizontal: 40, vertical: 15),
              ),
            ),
          ],
        ),
      ),
    );
  }
}